import os
import requests
import networkx as nx
import matplotlib.pyplot as plt
import asyncio
import aiohttp
from dotenv import load_dotenv
from tqdm.asyncio import tqdm
from typing import List, Dict, Any, Optional

from pyvis.network import Network
import webbrowser
import os
# --- C·∫§U H√åNH ---
load_dotenv()

# URL API c·ªßa b·∫°n (ƒëang ch·∫°y c·ª•c b·ªô)
FRAUD_API_URL = "http://127.0.0.1:8000/analyze"

# URL v√† API Key c·ªßa Etherscan
ETHERSCAN_API_URL = "https://api.etherscan.io/api"
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# Ng∆∞·ª°ng x√°c su·∫•t ƒë·ªÉ ph√¢n lo·∫°i m√†u s·∫Øc
PROB_FRAUD_THRESHOLD = 0.6  # Tr√™n m·ª©c n√†y l√† ƒê·ªè (Gian l·∫≠n)
PROB_SUSPICIOUS_THRESHOLD = 0.4  # Tr√™n m·ª©c n√†y l√† V√†ng (Nghi ng·ªù)


# D∆∞·ªõi m·ª©c n√†y s·∫Ω l√† Xanh (An to√†n)

# --- C√ÅC H√ÄM X·ª¨ L√ù ---

async def get_fraud_prediction(session: aiohttp.ClientSession, address: str) -> Optional[Dict[str, Any]]:
    """G·ªçi API d·ª± ƒëo√°n c·ª•c b·ªô m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch."""
    payload = {"address": address}
    try:
        async with session.post(FRAUD_API_URL, json=payload, timeout=60) as response:
            if response.status == 200:
                return await response.json()
            else:
                print(f"L·ªói khi d·ª± ƒëo√°n ƒë·ªãa ch·ªâ {address[:10]}...: Status {response.status}")
                return None
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API d·ª± ƒëo√°n cho ƒë·ªãa ch·ªâ {address[:10]}...: {e}")
        return None


def get_transactions(address: str) -> List[Dict[str, Any]]:
    """L·∫•y danh s√°ch c√°c giao d·ªãch t·ª´ Etherscan API."""
    print(f"\nüîç ƒêang l·∫•y giao d·ªãch cho ƒë·ªãa ch·ªâ: {address}")
    params = {
        "module": "account",
        "action": "txlist",
        "address": address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "asc",
        "apikey": ETHERSCAN_API_KEY
    }
    try:
        response = requests.get(ETHERSCAN_API_URL, params=params)
        response.raise_for_status()
        data = response.json()
        if data["status"] == "1":
            print(f"‚úÖ T√¨m th·∫•y {len(data['result'])} giao d·ªãch.")
            return data["result"]
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y giao d·ªãch ho·∫∑c c√≥ l·ªói t·ª´ API: {data['message']}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi g·ªçi Etherscan API: {e}")
        return []


def get_node_color(probability_fraud: float) -> str:
    """X√°c ƒë·ªãnh m√†u c·ªßa node d·ª±a tr√™n x√°c su·∫•t gian l·∫≠n."""
    if probability_fraud > PROB_FRAUD_THRESHOLD:
        return 'red'  # Gian l·∫≠n
    elif probability_fraud > PROB_SUSPICIOUS_THRESHOLD:
        return 'orange'  # Nghi ng·ªù (m√†u v√†ng)
    elif probability_fraud >= 0:
        return 'green'  # An to√†n
    else:
        return 'grey'  # Kh√¥ng x√°c ƒë·ªãnh


# THAY TH·∫æ TO√ÄN B·ªò H√ÄM C≈® B·∫∞NG H√ÄM N√ÄY

#
# THAY TH·∫æ TO√ÄN B·ªò H√ÄM C≈® B·∫∞NG H√ÄM N√ÄY
#
def draw_transaction_graph(central_address: str, transactions: List[Dict[str, Any]], predictions: Dict[str, Dict]):
    """
    V·∫Ω bi·ªÉu ƒë·ªì m·∫°ng l∆∞·ªõi giao d·ªãch T∆Ø∆†NG T√ÅC b·∫±ng PyVis.
    - Click v√†o node ƒë·ªÉ m·ªü Etherscan.
    - Hover v√†o c·∫°nh ƒë·ªÉ xem gi√° tr·ªã giao d·ªãch.
    - Hover v√†o node ƒë·ªÉ xem 'status' do model tr·∫£ v·ªÅ v√† x√°c su·∫•t.
    - Giao di·ªán hi·ªán ƒë·∫°i v√† c√≥ th·ªÉ t∆∞∆°ng t√°c.
    """
    print("\nüé® B·∫Øt ƒë·∫ßu v·∫Ω bi·ªÉu ƒë·ªì m·∫°ng l∆∞·ªõi t∆∞∆°ng t√°c v·ªõi PyVis...")

    net = Network(height="90vh", width="100%", bgcolor="#222222", font_color="white", directed=True)

    unique_addresses = set()
    for tx in transactions:
        from_addr = tx.get('from', '').lower()
        to_addr = tx.get('to', '').lower()
        if from_addr: unique_addresses.add(from_addr)
        if to_addr: unique_addresses.add(to_addr)

    for address in unique_addresses:
        prediction = predictions.get(address, {})
        prob = prediction.get('probability_fraud', -1)
        color = get_node_color(prob)
        status_from_model = prediction.get('prediction', 'Unknown')
        short_label = f"{address[:6]}...{address[-4:]}"
        etherscan_url = f"https://etherscan.io/address/{address}"

        # ‚≠ê S·ª¨A L·ªñI T·∫†I ƒê√ÇY ‚≠ê
        # Quy·∫øt ƒë·ªãnh chu·ªói hi·ªÉn th·ªã cho x√°c su·∫•t TR∆Ø·ªöC KHI ƒë∆∞a v√†o f-string l·ªõn.
        prob_display_string = f"{prob:.2%}" if prob >= 0 else "N/A"

        title_html = (
            f"<b>Address:</b> {address}<br>"
            f"<b>Model Status:</b> <b style='color: {color};'>{status_from_model.capitalize()}</b><br>"
            # S·ª≠ d·ª•ng chu·ªói ƒë√£ ƒë∆∞·ª£c t·∫°o s·∫µn ·ªü tr√™n
            f"<b>Fraud Probability:</b> {prob_display_string}<br><br>"
            f"<a href='{etherscan_url}' target='_blank' style='color: #87CEEB;'>Click to view on Etherscan</a>"
        )

        node_size = 25 if address == central_address else 15
        net.add_node(address, label=short_label, size=node_size, color=color, title=title_html)

    for tx in transactions:
        from_addr = tx.get('from', '').lower()
        to_addr = tx.get('to', '').lower()
        if not from_addr or not to_addr:
            continue
        try:
            value_wei = int(tx.get('value', 0))
            value_eth = value_wei / 1e18
            edge_title = f"Value: {value_eth:.6f} ETH"
            net.add_edge(source=from_addr, to=to_addr, title=edge_title, value=value_eth * 0.1 + 1)
        except (ValueError, TypeError):
            net.add_edge(source=from_addr, to=to_addr, title="Invalid value")

    net.set_options("""
    const options = {
      "nodes": {
        "font": {
          "size": 12,
          "face": "Tahoma"
        }
      },
      "edges": {
        "color": {"inherit": "from"},
        "smooth": {
          "type": "dynamic",
          "forceDirection": "none",
          "roundness": 0.5
        },
        "arrows": {
          "to": {
            "enabled": true,
            "scaleFactor": 1.4
          }
        },
        "arrowStrikethrough": false
      },
      "physics": {
        "forceAtlas2Based": {
          "gravitationalConstant": -50,
          "centralGravity": 0.01,
          "springLength": 230,
          "springConstant": 0.08,
          "avoidOverlap": 0.5
        },
        "minVelocity": 0.75,
        "solver": "forceAtlas2Based"
      },
      "interaction": {
        "hover": true,
        "navigationButtons": true,
        "tooltipDelay": 200
      }
    }
    """)

    file_name = f"transaction_network_{central_address[:8]}.html"
    try:
        net.save_graph(file_name)
        print(f"\n‚úÖ Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o t·ªáp: {file_name}")
        webbrowser.open(f'file://{os.path.realpath(file_name)}')
    except Exception as e:
        print(f"L·ªói khi l∆∞u ho·∫∑c m·ªü bi·ªÉu ƒë·ªì: {e}")


async def main():
    """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô quy tr√¨nh."""
    if not ETHERSCAN_API_KEY:
        print("L·ªñI: Bi·∫øn m√¥i tr∆∞·ªùng ETHERSCAN_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        print("Vui l√≤ng t·∫°o file .env v√† th√™m key v√†o ƒë√≥.")
        return

    print("--- Tr√¨nh ph√¢n t√≠ch v√† tr·ª±c quan h√≥a m·∫°ng l∆∞·ªõi giao d·ªãch Ethereum ---")

    # 1. Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ t·ª´ ng∆∞·ªùi d√πng
    central_address = input("Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ Ethereum b·∫°n mu·ªën ph√¢n t√≠ch: ").strip().lower()

    # 2. L·∫•y danh s√°ch giao d·ªãch t·ª´ Etherscan
    transactions = get_transactions(central_address)
    if not transactions:
        return

    # 3. Thu th·∫≠p t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ duy nh·∫•t
    unique_addresses = {central_address}
    for tx in transactions:
        from_addr = tx.get('from', '').lower()
        to_addr = tx.get('to', '').lower()
        if from_addr:
            unique_addresses.add(from_addr)
        if to_addr:
            unique_addresses.add(to_addr)

    print(f"\nüî¨ T√¨m th·∫•y {len(unique_addresses)} ƒë·ªãa ch·ªâ duy nh·∫•t. B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n...")

    # 4. G·ªçi API d·ª± ƒëo√°n cho t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ (b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ tƒÉng t·ªëc)
    predictions = {}
    async with aiohttp.ClientSession() as session:
        tasks = [get_fraud_prediction(session, addr) for addr in unique_addresses]
        # S·ª≠ d·ª•ng tqdm ƒë·ªÉ hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
        results = await tqdm.gather(*tasks, desc="ƒêang d·ª± ƒëo√°n")

    for res in results:
        if res and 'address' in res:
            predictions[res['address'].lower()] = res

    # 5. V·∫Ω bi·ªÉu ƒë·ªì
    draw_transaction_graph(central_address, transactions, predictions)


if __name__ == "__main__":
    # Ch·∫°y v√≤ng l·∫∑p s·ª± ki·ªán b·∫•t ƒë·ªìng b·ªô
    asyncio.run(main())