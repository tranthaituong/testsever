import os
import asyncio
import aiohttp
from typing import List, Dict, Any, Optional

from dotenv import load_dotenv
from pyvis.network import Network
from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import HTMLResponse

# --- C·∫§U H√åNH ---
load_dotenv()

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(
    title="Tr√¨nh ph√¢n t√≠ch m·∫°ng l∆∞·ªõi giao d·ªãch Ethereum",
    description="S·ª≠ d·ª•ng endpoint /graph v√† cung c·∫•p m·ªôt ƒë·ªãa ch·ªâ v√≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì m·∫°ng l∆∞·ªõi giao d·ªãch t∆∞∆°ng t√°c.",
    version="1.2.0"  # ƒê√£ c·∫≠p nh·∫≠t phi√™n b·∫£n
)

# URL API d·ª± ƒëo√°n (ƒëang ch·∫°y c·ª•c b·ªô)
FRAUD_API_URL = "http://127.0.0.1:8000/analyze"

# URL v√† API Key c·ªßa Etherscan
ETHERSCAN_API_URL = "https://api.etherscan.io/api"
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# Ng∆∞·ª°ng x√°c su·∫•t ƒë·ªÉ ph√¢n lo·∫°i m√†u s·∫Øc
PROB_FRAUD_THRESHOLD = 0.6
PROB_SUSPICIOUS_THRESHOLD = 0.4


# --- C√ÅC H√ÄM X·ª¨ L√ù (Kh√¥ng thay ƒë·ªïi) ---

async def get_fraud_prediction(session: aiohttp.ClientSession, address: str) -> Optional[Dict[str, Any]]:
    """G·ªçi API d·ª± ƒëo√°n c·ª•c b·ªô m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch."""
    payload = {"address": address}
    try:
        async with session.post(FRAUD_API_URL, json=payload, timeout=120) as response:
            if response.status == 200:
                return await response.json()
            else:
                print(f"L·ªói khi d·ª± ƒëo√°n ƒë·ªãa ch·ªâ {address[:10]}...: Status {response.status}")
                return None
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API d·ª± ƒëo√°n cho ƒë·ªãa ch·ªâ {address[:10]}...: {e}")
        return None


async def get_transactions(session: aiohttp.ClientSession, address: str) -> List[Dict[str, Any]]:
    """
    L·∫•y danh s√°ch c√°c giao d·ªãch t·ª´ Etherscan API m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô.
    Phi√™n b·∫£n n√†y ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ c√≥ logic gi·ªëng h·ªát v·ªõi t·ªáp graph.py ƒëang ho·∫°t ƒë·ªông.
    """
    print(f"üîç ƒêang l·∫•y giao d·ªãch cho ƒë·ªãa ch·ªâ: {address}")
    params = {
        "module": "account",
        "action": "txlist",
        "address": address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "asc",
        "apikey": ETHERSCAN_API_KEY
    }
    try:
        async with session.get(ETHERSCAN_API_URL, params=params) as response:
            # Ki·ªÉm tra n·∫øu request kh√¥ng th√†nh c√¥ng (vd: 500 server error)
            response.raise_for_status()
            data = await response.json()

            # Logic x·ª≠ l√Ω response gi·ªëng h·ªát graph.py
            if data.get("status") == "1":
                print(f"‚úÖ T√¨m th·∫•y {len(data['result'])} giao d·ªãch.")
                return data["result"]
            else:
                # In ra th√¥ng b√°o l·ªói t·ª´ Etherscan ƒë·ªÉ d·ªÖ d√†ng debug
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y giao d·ªãch ho·∫∑c c√≥ l·ªói t·ª´ API: {data.get('message', 'Unknown Error')}")
                return []
    except aiohttp.ClientError as e:
        # B·∫Øt l·ªói c·ª• th·ªÉ c·ªßa aiohttp
        print(f"L·ªói khi g·ªçi Etherscan API: {e}")
        raise HTTPException(status_code=503, detail=f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Etherscan: {e}")
    except Exception as e:
        # B·∫Øt c√°c l·ªói chung kh√°c
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong get_transactions: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server kh√¥ng x√°c ƒë·ªãnh: {e}")


def get_node_color(probability_fraud: float) -> str:
    """X√°c ƒë·ªãnh m√†u c·ªßa node d·ª±a tr√™n x√°c su·∫•t gian l·∫≠n."""
    if probability_fraud > PROB_FRAUD_THRESHOLD:
        return 'red'
    elif probability_fraud > PROB_SUSPICIOUS_THRESHOLD:
        return 'orange'
    elif probability_fraud >= 0:
        return 'green'
    else:
        return 'grey'


# --- H√ÄM V·∫º BI·ªÇU ƒê·ªí ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T HO√ÄN TO√ÄN ---
# Logic gi·ªù ƒë√¢y gi·ªëng h·ªát v·ªõi t·ªáp graph.py ƒëang ho·∫°t ƒë·ªông c·ªßa b·∫°n.

def draw_transaction_graph_to_html(central_address: str, transactions: List[Dict[str, Any]],
                                   predictions: Dict[str, Dict]) -> str:
    """
    V·∫Ω bi·ªÉu ƒë·ªì m·∫°ng l∆∞·ªõi b·∫±ng PyVis v√† tr·∫£ v·ªÅ chu·ªói HTML c·ªßa bi·ªÉu ƒë·ªì.
    Logic ƒë∆∞·ª£c sao ch√©p t·ª´ phi√™n b·∫£n ho·∫°t ƒë·ªông trong graph.py.
    """
    print("\nüé® B·∫Øt ƒë·∫ßu t·∫°o m√£ HTML cho bi·ªÉu ƒë·ªì PyVis...")
    net = Network(height="95vh", width="100%", bgcolor="#222222", font_color="white", directed=True)

    unique_addresses = {addr.lower() for tx in transactions for addr in [tx.get('from'), tx.get('to')] if addr}
    unique_addresses.add(central_address.lower())

    for address in unique_addresses:
        prediction = predictions.get(address, {})
        prob = prediction.get('probability_fraud', -1)
        color = get_node_color(prob)
        status_from_model = prediction.get('prediction', 'Unknown')
        short_label = f"{address[:6]}...{address[-4:]}"
        etherscan_url = f"https://etherscan.io/address/{address}"

        # Quy·∫øt ƒë·ªãnh chu·ªói hi·ªÉn th·ªã cho x√°c su·∫•t TR∆Ø·ªöC KHI ƒë∆∞a v√†o f-string l·ªõn.
        prob_display_string = f"{prob:.2%}" if prob >= 0 else "N/A"

        title_html = (
            f"<b>Address:</b> {address}<br>"
            f"<b>Model Status:</b> <b style='color: {color};'>{status_from_model.capitalize()}</b><br>"
            f"<b>Fraud Probability:</b> {prob_display_string}<br><br>"
            f"<a href='{etherscan_url}' target='_blank' style='color: #87CEEB;'>Click to view on Etherscan</a>"
        )
        node_size = 25 if address == central_address.lower() else 15
        net.add_node(address, label=short_label, size=node_size, color=color, title=title_html)

    for tx in transactions:
        from_addr = tx.get('from', '').lower()
        to_addr = tx.get('to', '').lower()
        if not from_addr or not to_addr: continue
        try:
            value_eth = int(tx.get('value', 0)) / 1e18
            edge_title = f"Value: {value_eth:.6f} ETH"
            net.add_edge(source=from_addr, to=to_addr, title=edge_title, value=value_eth * 0.1 + 1)
        except (ValueError, TypeError):
            net.add_edge(source=from_addr, to=to_addr, title="Invalid value")

    # --- S·ª¨A L·ªñI CH√çNH T·∫†I ƒê√ÇY ---
    # Kh√¥i ph·ª•c chu·ªói options g·ªëc t·ª´ t·ªáp graph.py bao g·ªìm c·∫£ "const options ="
    # ƒê√¢y l√† nguy√™n nh√¢n ch√≠nh g√¢y ra s·ª± kh√°c bi·ªát.
    net.set_options("""
    const options = {
      "nodes": {
        "font": {
          "size": 12,
          "face": "Tahoma"
        }
      },
      "edges": {
        "color": {"inherit": "from"},
        "smooth": {
          "type": "dynamic",
          "forceDirection": "none",
          "roundness": 0.5
        },
        "arrows": {
          "to": {
            "enabled": true,
            "scaleFactor": 1.4
          }
        },
        "arrowStrikethrough": false
      },
      "physics": {
        "forceAtlas2Based": {
          "gravitationalConstant": -50,
          "centralGravity": 0.01,
          "springLength": 230,
          "springConstant": 0.08,
          "avoidOverlap": 0.5
        },
        "minVelocity": 0.75,
        "solver": "forceAtlas2Based"
      },
      "interaction": {
        "hover": true,
        "navigationButtons": true,
        "tooltipDelay": 200
      }
    }
    """)
    # --- K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI ---

    html_content = net.generate_html()
    print("‚úÖ ƒê√£ t·∫°o xong m√£ HTML.")
    return html_content


# --- ENDPOINT C·ª¶A API (Kh√¥ng thay ƒë·ªïi) ---

@app.get("/graph", response_class=HTMLResponse)
async def analyze_address_and_get_graph(
        address: str = Query(..., title="ƒê·ªãa ch·ªâ v√≠ Ethereum",
                             description="ƒê·ªãa ch·ªâ v√≠ c·∫ßn ph√¢n t√≠ch, v√≠ d·ª•: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
                             regex="^0x[a-fA-F0-9]{40}$")
):
    """
    Ph√¢n t√≠ch m·ªôt ƒë·ªãa ch·ªâ v√≠ Ethereum v√† tr·∫£ v·ªÅ m·ªôt bi·ªÉu ƒë·ªì m·∫°ng l∆∞·ªõi giao d·ªãch t∆∞∆°ng t√°c.

    Cung c·∫•p ƒë·ªãa ch·ªâ v√≠ d∆∞·ªõi d·∫°ng m·ªôt query parameter `?address=...`
    """
    if not ETHERSCAN_API_KEY:
        raise HTTPException(status_code=500,
                            detail="L·ªñI: Bi·∫øn m√¥i tr∆∞·ªùng ETHERSCAN_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p tr√™n server.")

    central_address = address.lower().strip()

    async with aiohttp.ClientSession() as session:
        transactions = await get_transactions(session, central_address)
        if not transactions:
            return HTMLResponse(content=f"<h3>Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o cho ƒë·ªãa ch·ªâ: {central_address}</h3>",
                                status_code=404)

        unique_addresses = {addr.lower() for tx in transactions for addr in [tx.get('from'), tx.get('to')] if addr}
        unique_addresses.add(central_address)
        print(f"\nüî¨ T√¨m th·∫•y {len(unique_addresses)} ƒë·ªãa ch·ªâ duy nh·∫•t. B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n...")

        predictions = {}
        prediction_tasks = [get_fraud_prediction(session, addr) for addr in unique_addresses]
        results = await asyncio.gather(*prediction_tasks)

        for res in results:
            if res and 'address' in res:
                predictions[res['address'].lower()] = res

        html_graph = draw_transaction_graph_to_html(central_address, transactions, predictions)
        return HTMLResponse(content=html_graph)